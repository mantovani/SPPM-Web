=pod

=encoding utf8

=head1 Autenticação em aplicações usando Catalyst

O objetivo da autenticação é estabelecer ou confirmar a identidade de
um usuário, o qual pode ser uma pessoa ou grupo de pessoas que usem as mesmas
credenciais, provendo desta forma, suporte as demais partes do sistema como
controle de acesso (autorização) e customização da interface com o usuário.
Neste artigo, veremos como realizar autenticação básica em aplicações que usam
o web I<framework> Catalyst com o I<plugin> padrão, porém não se é obrigado
a usar este I<plugin>, o Catalyst é flexível suficiente para realizar a autenticação
e autorização da forma que se quer implementar.

=head2 Requisitos

Para realizar a autenticação, precisa-se de um conjunto de I<plugins> sendo eles:

=over 4

=item * L<Catalyst::Plugin::Authentication>

Este I<plugin> provê a estrutura básica para aplicações com Catalyst realizarem
autenticação e autorização, contendo também alguns I<plugins> de C<Credential> e C<Store>.

=item * Um I<plugin> de C<Credential>

=item * Um I<plugin> de C<Store>

=item * I<Plugins> para controle de sessão

A fim de permitir que teus usuários permaneçam conectados à sua aplicação através
das páginas, é preciso guardar este estado de alguma forma tanto do lado do servidor
quanto no cliente. Pode-se usar o recomendado pelo Catalyst para tal fim,
L<Catalyst::Plugin::Session>, juntamente com um I<plugin> de C<State> e outro de C<Store>.

=back

Antes de prosseguir, lembre-se de carregar os I<plugins> requeridos na classe da aplicação.

    use Catalyst qw/
        Authentication
        Session
        Session::Store::Foo
        Session::State::Bar
    /;

=head2 Catalyst::Plugin::Authentication

A autenticação no Catalyst está projetada para ser bem flexível aos vários tipos
de processos que se podem realizar, basicamente dividida em módulos de armazenamento
(C<Store>) e de verificação (C<Credential>). O C<Credential> é responsável por verificar
a identidade do usuário, geralmente comparando a informação provida por este com a
informação encontrada no C<Store>.
Estes módulos são carregados em conjunto por meio de I<realms>, permitindo assim à aplicação
ter múltiplos métodos de autenticação de usuários. Toda aplicação que realize autenticação
deve ter ao menos um C<realm> que é o C<default>, mas pode-se ter quantos forem necessários.

=head2 Configuração

Os itens da configuração vão depender dos módulos de C<Credential> e C<Store> que se tenha
decidio usar. A seguir, temos um exemplo de configuração (no formato do L<Config::General>)
que utiliza dois métodos de autenticação com o padrão para o C<realm> de C<password>.
Consulte a documentação para detalhes sobre a configuração de cada tipo de C<Credential>
e C<Store>, bem como a do L<Catalyst::Plugin::Authentication>.

    <authentication>
        default_realm password
        <password>
            <credential>
                class Password
                password_field passwd
                password_type crypted
            </credential>
            <store>
                class DBIx::Class
                user_class DB::LocalAccount
            </store>
        </password>
        <signature>
            <credential>
                class Signature
                signature_field sign
                session_field session_data
            </credential>
            <store>
                class DBIx::Class
                user_class DB::LocalAccount
            </store>
        </signature>
    </authentication>

Até a versão 0.10008 do I<plugin> de autenticação, você precisaria colocar toda
os I<realms> dentro da chave C<realms>.

    <authentication>
        default_realm password
        <realms>
            <password>

            (...)

            </password>
            <signature>

            (...)

            </signature>
        </realms>
    </authentication>

=head2 Implementação

Existem apenas três partes que se referem a implementação básica de autenticação.

=over 3

=item * I<Login>

=item * Verificar que um usuário está "logado"

=item * I<Logout>

=back

=head3 I<Login>

Esta parte envolve - geralmente a partir de um formulário - obter as credenciais
do usuário e verificar que este é valido. Pode-se usar um processador de formulários
como o L<HTML::FormHandler>, mas não é requisito. Para fazer I<login> do usuário,
usa-se o método C<authenticate> a partir de uma I<action> num I<controller>.

    sub login : Action {
        my ( $self, $c ) = @_;
        my $params = $c->req->body_params;
        if ( $params->{'username'} && $params->{'password'} ) {
            if ( $c->authenticate({ map { $_ => $params->{$_} } qw/username password/ }) ) {
                # usuário válido e autenticado
                # redirecione para algum caminho da sua aplicação
            } else {
                # mostrar a página com o formulário de autenticação e uma mensagem de erro
            }
        } else {
            # mostrar a página com o formulário de autenticação
        }
    }

=head3 Verificar que um usuário está "logado"

Em determinados caminhos da aplicação, é necessário que se tenha um usuário
"logado", como por exemplo uma página de preferências ou se a aplicação utiliza
dados deste para gerar e mostrar informações numa página. Deste modo, faz-se
necessário retornar para o passo de I<login> caso a verificação falhe. Para tal fim,
pode-se usar alguns métodos como

=over 3

=item * C<user_exists>

Retorna verdeiro se um usuário está "logado". Se esta for a única informação
necessária, não interessando qual usuário especificamente é, a depender do
mecanismo de armazenamento, este método pode ser muito mais eficiente.
A diferença entre este método e o C<user> é que este retornará verdadeiro,
mesmo se o usuário "logado" não foi ainda recuperado a partir do armazenamento.

=item * C<user_in_realm>

Semelhante ao C<user_exists>, exceto que apenas retorna verdadeiro se o usuário
está "logado" -e- foi recuperado a partir do C<realm> fornecido.

=item * C<user>

Retorna o atual usuário "logado", ou C<undef> se não há algum.

=back

Como por exemplo

    sub requires_user : Action {
        my ( $self, $c ) = @_;
        if ( $c->user_exists ) {
            # usuário "logado"
        } else {
            # retorna ao passo de login
        }
    }

=head3 I<Logout>

E por último a mais simples, resume-se a apenas chamar o método C<logout>
e redirecionar o usuário para o caminho de I<login> ou algum outro.

    sub logout : Action {
        my ( $self, $c ) = @_;
        $c->logout;
        # redirecione
    }

=head2 Veja também

L<Catalyst Advent Calendar 2008-19|http://www.catalystframework.org/calendar/2008/19>, L<CatalystX::SimpleLogin>
e L<Humane Login Screens|http://www.shadowcat.co.uk/blog/matt-s-trout/humane-login-screens/>.

=head2 AUTOR

Wallace Reis <wallace@reis.org.br>

=cut

