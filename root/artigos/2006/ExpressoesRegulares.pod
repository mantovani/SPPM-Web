=pod

r2 - 19 Aug 2006 - JoenioCosta

=head1 Expressões Regulares

I<>

A compreensE<atilde>o do funcionamento das ExpressE<otilde>es Regulares
e dos operadores e funE<ccedil>E<otilde>es relacionados a
manipulaE<ccedil>E<atilde>o dessas expressE<otilde>es, na Perl,
E<eacute> um dos passos fundamentais para a programaE<ccedil>E<atilde>o
rE<aacute>pida e eficiente que nos E<eacute> proporcionada por essa
linguagem extremamente flexE<iacute>vel e produtiva. Pode-se dizer de
uma ExpressE<atilde>o Regular, que ela E<eacute> uma "regra" que
permite descrever, precisamente, todos os elementos de um conjunto,
seja este finito ou infinito, sem a necessidade de enumerE<aacute>-los
explicitamente. Por exemplo, a expressE<atilde>o regular '^[0-9]$'
descreve os algarismos de 0 a 9 e a expressE<atilde>o '^[a-zA-Z]$', as
letras maiE<uacute>sculas e minE<uacute>sculas do alfabeto,
incluindo-se "k" ou "K", "w" ou "W" e "y" ou "Y".

Nesse artigo, irei descrever como elaborar expressE<otilde>es regulares
e como aplicE<aacute>-las na soluE<ccedil>E<atilde>o de problemas
computacionais. Explicarei, tambE<eacute>m, o comportamento do
sub-grupo (nE<atilde>o todos eles) das estruturas de dados, das
funE<ccedil>E<otilde>es e dos operadores que tE<ecirc>m sua
operaE<ccedil>E<atilde>o baseada na avaliaE<ccedil>E<atilde>o de
expressE<otilde>es regulares.

=head2 1. Elaborando ExpressE<otilde>es Regulares

A elaboraE<ccedil>E<atilde>o de uma expressE<atilde>o regular E<eacute>
feita atravE<eacute>s de caracteres e metacaracteres. Os caracteres
irE<atilde>o sempre descrever elementos explE<iacute>citos e os
metacaracteres, elementos implE<iacute>citos e as
condiE<ccedil>E<otilde>es em que esses elementos ocorrem dentro de um
conjunto. Como exemplo, vamos tomar duas expressE<otilde>es regulares:
'^a{1,2}$' e '^(a|b){1,3}$'. A primeira, descreve o cojunto que
contE<eacute>m dois elementos, sendo eles "a" e "aa". JE<aacute> a
segunda expressE<atilde>o, descreve o cojunto com os elementos "a",
"aa", "aaa", "b", "bb" e "bbb". Estas duas expressE<otilde>es
sE<atilde>o formadas pelos caracteres "a" e "b", utilizados para compor
os elementos do conjunto, e pelos metacaracteres "{}", "()", "|", "^" e
"$" que determinam como devem ser feito as composiE<ccedil>E<otilde>es.
O metacaracter formado pelos sE<iacute>mbolos "{}", E<eacute> um
quantificador que define a quantidade de vezes que um caracter
irE<aacute> ocorrer em um elemento. No primeiro exemplo, ele especifica
que os elementos que constituem o conjunto, descrito pela
expressE<atilde>o em questE<atilde>o, serE<atilde>o compostos apenas
por uma ou duas ocorrE<ecirc>ncias do caracterer "a". Ainda no primeiro
exemplo, existem dois outros metacaracteres, "^" e "$". A
funE<ccedil>E<atilde>o deles, E<eacute> definir fronteiras, o que
significa que os elementos devem ser formados iniciando pelo caracter
ou a composiE<ccedil>E<atilde>o de caracteres que segue o
sE<iacute>mbolo "^" e terminados pelo caracter ou a
composiE<ccedil>E<atilde>o que antecede "$". Exemplificando, a
expressE<atilde>o '^a{1,2}' descreve o conjunto cujos os elementos
iniciam com um ou dois caracteres "a", ou seja, um conjunto infinito de
elementos. Da mesma forma, a expressE<atilde>o 'a{1,2}$' irE<aacute>
definir um conjunto infinito, e tambE<eacute>m infinito, porE<eacute>m
maior ainda, serE<aacute> o conjunto descrito pela expressE<atilde>o
'a{1,2}' que nE<atilde>o estabelece nenhuma fronteira. Em outras
palavras, essa expressE<atilde>o irE<aacute> descrever o conjunto de
elementos formados por um subconjunto de caracteres, sendo eles "a" e
"aa". E<Eacute> sempre bom estar atento a peculiaridades como essa para
nE<atilde>o cometer erros na elaboraE<ccedil>E<atilde>o de
expressE<otilde>es. Outro exemplo de expressE<atilde>o regular peculiar
E<eacute> '^[^-_0-9]'. HE<aacute> duas peculiaridades nessa
expressE<atilde>o, tente descobrir quais. Uma delas, serE<aacute>
esclarecida nos prE<oacute>ximos capE<iacute>tulos, jE<aacute> a outra,
vocE<ecirc> terE<aacute> que recorrer E<agrave>s referE<ecirc>ncias
bibliogrE<aacute>ficas. smile

Uma expressE<atilde>o regular pode ser composta por caracteres,
metacaracteres ou pela combinaE<ccedil>E<atilde>o de ambos. Quando
formada apenas por caracteres, ela irE<aacute> sempre descrever o
conjunto de elementos que possuem ao menos esses caracteres. A
expressE<atilde>o 'ch', por exemplo, pode ser usada para descrever o
conjunto de palavras que sE<atilde>o grafadas com o dE<iacute>grafo
"ch". JE<aacute> a expressE<atilde>o '^ch', descreveria por sua vez o
conjunto das palavras que iniciam com esse dE<iacute>grafo. De maneira
anE<aacute>loga a expressE<atilde>o '(ss|rr)(a|e)' ou '(ss|rr)[ae]'
enumeraria as palavras contendo as sE<iacute>labas "ssa", "sse", "rra"
e "rre". Outras composiE<ccedil>E<otilde>es equivalentes seriam:
'(s|r){2}(a|e)' ou '[sr]{2}[ae]'.

AtenE<ccedil>E<atilde>o, existe uma grande diferenE<ccedil>a entre as
expressE<otilde>es '(s|r){2}' e 's|r{2}'. Essa E<uacute>ltima,
enumeraria os elementos "s", "r" e "rr". TambE<eacute>m entre 'sr{1,2}'
e '(sr){1,2}, hE<aacute> uma boa diferenE<ccedil>a, veja os conjuntos
descritos por ambas: "sr", "srr" e "sr", "srsr". O metacaracter
agrupador "()" faz com que o metacaracter que o segue afete o grupo de
caracteres como um todo e nE<atilde>o individualmente.

Bem, creio que nesse ponto a idE<eacute>ia de conjuntos descritos
atravE<eacute>s de um "regra", a ExpressE<atilde>o Regular, deva estar
bem elucidada. E para quem nunca havia lidado com expressE<otilde>es
regulares, talvez, em algum momento, tenha esbarrado com alguma, pois
elas sE<atilde>o utilizadas por diversos programas (grep, sed, awk, vi,
apache, proftpd, squid, etc.) e liguangens de
programaE<ccedil>E<atilde>o (C, python, php, java e outras). E a
razE<atilde>o de tamanha difusE<atilde>o, E<eacute> o fato de serem
aplicE<aacute>veis na soluE<ccedil>E<atilde>o de um vasto
nE<uacute>mero de problemas computacionais, cuja a
soluE<ccedil>E<atilde>o se torna simplificada, e portanto,
fE<aacute>cil de implementar mas sem comprometer o desempenho da
aplicaE<ccedil>E<atilde>o.

=head2 2. Metacaracteres

A Perl possui vE<aacute>rios metacaracteres para
composiE<ccedil>E<atilde>o de expressE<otilde>es regulares, esses
derivados das rotinas de expressE<otilde>es regulares, versE<atilde>o
8. Nesse artigo, nE<atilde>o irei descrever todos, apenas os mais
importantes. Consulte a referE<ecirc>ncia bibliografica ao final desse
artigo, caso deseje conhecer todos os demais metacaracteres.

=head2 2.1. BE<aacute>sicos

A partir desse grupo bE<aacute>sico, E<eacute> possE<iacute>vel compor
expressE<otilde>es regulares para descrever qualquer conjunto de
elementos. Os sE<iacute>mbolos "*", "+" e "?" nE<atilde>o foram
comentados ainda, mas E<eacute> fE<aacute>cil deduzir que sE<atilde>o
metacaracteres quantificadores especializados. Por outro lado, "."
E<eacute> um tanto diferenciado e representa nada mais, nada menos que
qualquer caracterer. Ele E<eacute> uma espE<eacute>cie de "curinga" das
expressE<otilde>es regulares.

O sE<iacute>mbolo "^", assumirE<aacute> outra caracterE<iacute>stica
quando no interior e inE<iacute>cio do metacaracter "[]". Nessa
ocasiE<atilde>o, ele irE<aacute> negar toda a classe de caracteres
listada explicita ou implicitamente. Por exemplo, para descrever o
conjunto formado pelos elementos constituidos de qualquer caracter com
excessE<atilde>o dos dE<iacute>gitos, pode ser utilizada a
expressE<atilde>o '[^0123456789]' ou '[^0-9]'.

       ^  ->  caracter que o segue inicia o elemento
       $  ->  caracter que o antecede finaliza o elemento

       .   ->  caracter ÃÂÃÂÃÂÃÂ© um sÃÂÃÂÃÂÃÂ­mbolo qualquer (exceto nova linha)

       |   ->  enumerador de alternativas
      ()   ->  agrupador
      []   ->  especificificador de classes

       *   ->  caracter ocorre 0 ou mais vezes
       +   ->  caracter ocorre 1 ou mais vezes
       ?   ->  caracter ocorre 1 ou 0 vezes
     {n}  ->  caracter ocorre exatamente "n" vezes
    {n,}  ->  caracter ocorre pelo menos "n" vezes
  {n,m} ->  caracter ocorre pelo menos "n" vezes e nÃÂÃÂÃÂÃÂ£o mais que "m" vezes

=head2 2.2. Complementares

Alguns desses metacaracteres sE<atilde>o E<uacute>teis na
representaE<ccedil>E<atilde>o de diversas classes de caracteres de
maneira simplificada e elegante. Essas classes, entretanto, podem, de
diferentes formas, serem representadas com a combinaE<ccedil>E<atilde>o
pura e simplesmente dos metacaracteres bE<aacute>sicos. PorE<eacute>m,
feito dessa forma, a elaboraE<ccedil>E<atilde>o de expressE<otilde>es
regulares triviais se tornaria bastante complexa.

HE<aacute> tambE<eacute>m um grupo de metacaracteres para a
representaE<ccedil>E<atilde>o de caracteres de controle que nE<atilde>o
podem ser escritos, como E<eacute> o caso da quebra de linha e da
tabulaE<ccedil>E<atilde>o.

   \w  ->  [a-zA-Z_]
   \W ->  [^a-zA-Z_]
   \s  ->  [ ]
   \S  ->  [^ ]
   \d  ->  [0-9], [0123456789] ou (0|1|2|3|4|5|6|7|8|9)
   \D  ->  [^0-9]

   \t   ->  tabulaÃÂÃÂÃÂÃÂ§ÃÂÃÂÃÂÃÂ£o
   \n  ->  (LF ou NL) nova linha
   \r   ->  (CR) retorno
   \f   ->  (FF) form feed
   \e  ->  (ESC) escape

=head2 2.3. O metacaracter especial '\'

Em muitas ocasiE<otilde>es haverE<aacute> a necessidade de descrever
conjuntos que contE<ecirc>m elementos formados por sE<iacute>mbolos que
representam justamente um metacaracter. Nesse caso, utiliza-se "\" para
que o outro metacaractere seja tratado como um simples caracter. Ele
prE<oacute>prio (o metacaracter "\") precisarE<aacute>, tambE<eacute>m,
ser confrontado consigo mesmo para ser considerado um simples caracter.
Para a descriE<ccedil>E<atilde>o de um conjunto contendo apenas os
elementos "U$" e "R$", por exemplo, pode-se usar '^(U\$|R\$)$',
'^(U|R)\$$' ou '^[UR]\$$'. Pense que "\" E<eacute> a criptonita que
tira os "poderes" dos metacaracteres, transformando-os em simples
caracteres.

=head2 3. Aplicando e utilizando expressE<otilde>es regulares

Na Perl, a aplicaE<ccedil>E<atilde>o e utilizaE<ccedil>E<atilde>o de
expressE<otilde>es regulares E<eacute> bastante direta e simples.
Devido, principalmente, ao fato da linguagem possuir, para a
manipulaE<ccedil>E<atilde>o dessas expressE<otilde>es, um conjunto de
operadores, estruturas de dados e funE<ccedil>E<otilde>es, todos eles
internos e diversificados. Diferentemente de outras linguagens, onde a
manipulaE<ccedil>E<atilde>o das expressE<otilde>es E<eacute> provida
apenas atravE<eacute>s de uma biblioteca externa de
funE<ccedil>E<otilde>es. E E<eacute>, por se diferenciar nesse
aspectado de outras linguagens, e tambE<eacute>m pela riqueza de
recursos disponE<iacute>veis para manipulaE<ccedil>E<atilde>o de
expressE<otilde>es, que considero a Perl a linguagem das
expressE<otilde>es regulares.

=head2 3.1. Operadores BE<aacute>sicos

As operaE<ccedil>E<otilde>es com expressE<otilde>es regulares baseam-se
simplesmente em constatar ou verificar se um elemento (uma "string" de
caracteres) pertence ou nE<atilde>o ao conjunto descrito por esta ou
aquela expressE<atilde>o regular. Quando uma expressE<atilde>o
E<eacute> submetida a um operador, o grupo de caracteres e
metacarateres que a compE<otilde>e devem ser envolvido pelo caracter
"/". Essa E<eacute> uma notaE<ccedil>E<atilde>o sintE<aacute>tica e,
por tanto, deve ser sempre obedecida.

Para a operaE<ccedil>E<atilde>o bE<aacute>sica, utilizam-se os
operadores "=~" e "!~" que corresponem, respectivamente, as
operaE<ccedil>E<otilde>es "pertence" e "nE<atilde>o pertence". O
resultado dessas operaE<ccedil>E<otilde>es poderE<aacute> ser
logicamente avaliado, mas nE<atilde>o somente isso, dependendo da
expressE<atilde>o submetida. Vejamos um exemplo prE<aacute>tico de um
programa que recebe uma lista de URLs (ex.: http://cascavel.pm.org) e
descreve cada uma delas de acordo com o prefixo identificador do
serviE<ccedil>o:

  my $url;

  foreach $url (@ARGV) {
     if ($url =~ /^http:/) {
        print "EndereÃÂÃÂÃÂÃÂ§o de um serviÃÂÃÂÃÂÃÂ§o WEB\n";
     }
     elsif ($url =~ /^https:/) {
        print "EndereÃÂÃÂÃÂÃÂ§o de um serviÃÂÃÂÃÂÃÂ§o WEB seguro\n";
     }
     elsif ($url =~ /^ftp:/) {
        print "EndereÃÂÃÂÃÂÃÂ§o de um serviÃÂÃÂÃÂÃÂ§o FTP\n";
     }
  }

=head2 3.2. ReferE<ecirc>ncias

O metacaracter agrupador "()" alE<eacute>m da funE<ccedil>E<atilde>o
primE<aacute>ria, possui uma segunda funE<ccedil>E<atilde>o, e que
tambE<eacute>m E<eacute> bastante E<uacute>til, alE<eacute>m de
poderosa se bem empregada. Quando uma expressE<atilde>o com esse
metacarater E<eacute> operada, os caracteres do elemento avaliado, que
correspodem a sub-expressE<atilde>o agrupada, serE<atilde>o
extraE<iacute>dos da esquerda para a direita e armazenados nas
variE<aacute>veis reservadas ($1, $2, $3, etc.). Em outras palavras,
E<eacute> criado uma referE<ecirc>ncia E<agrave>s partes do elemento (a
"string") em anE<aacute>lise. O exemplo abaixo exemplifica bem essa
funcionalidade:

   my $url;

   foreach $url (@ARGV) {
      if ($url =~ /^(.+):\/\/(.*)$/)
         print "-- $2: ";
         if ($1 eq 'http') {
            print "endereÃÂÃÂÃÂÃÂ§o de serviÃÂÃÂÃÂÃÂ§o WEB\n";
         }
         elsif ($1 eq 'http') {
            print "endereÃÂÃÂÃÂÃÂ§o de serviÃÂÃÂÃÂÃÂ§o WEB seguro\n";
         }
         elsif ($1 eq 'ftp') {
            print "endereÃÂÃÂÃÂÃÂ§o de serviÃÂÃÂÃÂÃÂ§o de FTP\n";
         }
         else {
            print "endereÃÂÃÂÃÂÃÂ§o de um serviÃÂÃÂÃÂÃÂ§o desconhecido\n";
         }
      }
      else {
         print "Url invÃÂÃÂÃÂÃÂ¡lida\n";
      }
   }

Para nE<atilde>o se confundir com o caracter sintE<aacute>tico "/", que
envolve uma expressE<atilde>o regular, esse mesmo caracter, quando no
interior da expressE<atilde>o, deve ser antecedido pelo metacaracter
"\". O caracter "/" que delimita a expressE<atilde>o regular,
nE<atilde>o E<eacute> simplesmente um delimitador, de fato, a
composiE<ccedil>E<atilde>o "//" E<eacute> uma
simplificaE<ccedil>E<atilde>o de "m//", onde "m" significa "match".
HE<aacute> tambE<eacute>m uma outra composiE<ccedil>E<atilde>o, "s///,
onde "s" significa "substitute". Ambas as composiE<ccedil>E<atilde>o
suportam os modificadores abaixo:

   i   ->  avalia desconsiderando maiÃÂÃÂÃÂÃÂºsculas e minÃÂÃÂÃÂÃÂºsculas
   m ->  avalia considerando "string" com mais de uma linha
   s  ->  avalia considerando "string" com uma ÃÂÃÂÃÂÃÂºnica linha
   x  ->  avalia desconsiderando espaÃÂÃÂÃÂÃÂ§os e comentÃÂÃÂÃÂÃÂ¡rios
   g  ->  avalia ou substitui (quando "s///") globalmente

O operador "s///" tem um comportamento bastante diferenciado. Ele
possui dois operandos em vez de apenas um, como E<eacute> no caso de
"m//" (ou simplesmente "//"). Sendo os operandos, uma expressE<atilde>o
regular e uma "string". Veja abaixo a composiE<ccedil>E<atilde>o
sintE<aacute>tica desse operando:

   Sintaxe:

      s/REX/STRING/imsxg

onde,

      REX     ->  expressÃÂÃÂÃÂÃÂ£o regular
      STRING  ->  um grupo de caracteres para substituiÃÂÃÂÃÂÃÂ§ÃÂÃÂÃÂÃÂ£o
      imsxg   ->  modificadores

Sua operaE<ccedil>E<atilde>o consiste em confrontar um elemento com uma
expressE<atilde>o regular e substituir por "STRING" as partes desse
elemento pertencentes ao cojunto descrito por "REX". ApE<oacute>s
analisar os exemplos abaixo, percebe-se que as possibilidades de
aplicaE<ccedil>E<atilde>o desse operador sE<atilde>o infinitas, mesmo
sendo os exemplos triviais. E combinado com expressE<otilde>es
regulares usando o metacaracter "()" e as variE<aacute>veis reservadas
($1, $2, $3, etc.), pode-se fazer, acho, qualquer tipo de
manipulaE<ccedil>E<atilde>o com "strings". Experimente!

   my $elemento;

   $elemento = '-a-A-a-A-a-A-a-A-a-A';
   $elmento =~ s/a/+/;
   print "$elemento\n";            # ResultarÃÂÃÂÃÂÃÂ¡ em: -+-A-a-A-a-A-a-A-a-A

   $elemento = '-a-A-a-A-a-A-a-A-a-A';
   $elemento =~ s/a/+/g;
   print "$elemento\n";            # ResultarÃÂÃÂÃÂÃÂ¡ em: -+-A-+-A-+-A-+-A-+-A

   $elemento = '-a-A-a-A-a-A-a-A-a-A';
   $elemento =~ s/a/+/gi;
   print "$elemento\n";            # ResultarÃÂÃÂÃÂÃÂ¡ em: -+-+-+-+-+-+-+-+-+-+

   #
   # Esse exemplo, ÃÂÃÂÃÂÃÂ© uma alternativa ao anterior
   #
   $elemento = '-a-A-a-A-a-A-a-A-a-A';
   $elemento =~ s/[aA]/+/g;
   print "$elemento\n";            # ResultarÃÂÃÂÃÂÃÂ¡ em: -+-+-+-+-+-+-+-+-+-+

   #
   # Aplicando o metacaracter "()"
   #
   $elemento = '-a-A-a-A-a-A-a-A-a-A';
   $elemento =~ s/([aA])/($1)/g;
   print "$elemento\n";            # ResultarÃÂÃÂÃÂÃÂ¡ em: -(a)-(A)-(a)-(A)-(a)-(A)
                                                   -(a)-(A)-(a)-(A)

=head2 3.3. FunE<ccedil>E<otilde>es

Existem duas funE<ccedil>E<otilde>es, em especial, que operam com base
em uma expressE<atilde>o regular, sE<atilde>o elas: "split" e "grep". A
primeira, quebra uma "string" em uma lista de "strings", considerando
como delimitadores para a quebra, caracteres que pertenE<ccedil>am a um
determinado conjunto. A sengunda, percorre um "array" e retorna os
elementos que tambE<eacute>m estejam contidos em um cojunto. E<Eacute>
E<oacute>bvio que o conjunto considerado por ambas as
funE<ccedil>E<otilde>es, E<eacute> definido por uma expressE<atilde>o
regular.

   #
   # Usando o "split"
   #
   my $frase = 'Quantas palavras existem nesse frase?';
   my @palavras = split /\s+/;

   print "Total: ",scalar @palavras,"\n";


   #
   # Usando "grep" com uma expressÃÂÃÂÃÂÃÂ£o regular
   #
   my @numeros = (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20);
   my @numeros_pares = grep /[02468]$/,@numeros;

=head2 4. Bibliografia

=over

=item * Online

=back

=over

=item *

=over

=item * TE<iacute>tulo: ExpressE<otilde>es Regulares

=item * DescriE<ccedil>E<atilde>o: Um excelente guia, escrito por
AurE<eacute>lio Marinho Jargas.

=back

=back

=over

=item *

=over

=item * TE<iacute>tulo: Perlre man page?

=item * DescriE<ccedil>E<atilde>o: Essa E<eacute> a
documentaE<ccedil>E<atilde>o oficial sobre ExpressE<otilde>es Regulares
na Perl.

=back

=back

----

Criada por: frighetti E<uacute>ltima modificaE<ccedil>E<atilde>o em:
Segunda-feira 16 of Janeiro, 2006 [19:15:05 UTC] por frighetti

=head1 AUTOR

Joenio Costa

=cut

#Pod::HTML2Pod conversion notes:
# 20334 bytes of input
#Sun Jan 31 01:46:03 2010 mantovani
# No a_name switch not specified, so will not try to render <a name='...'>
# No a_href switch not specified, so will not try to render <a href='...'>
